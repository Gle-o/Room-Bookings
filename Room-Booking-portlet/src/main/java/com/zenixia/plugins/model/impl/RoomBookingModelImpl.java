package com.zenixia.plugins.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.zenixia.plugins.model.RoomBooking;
import com.zenixia.plugins.model.RoomBookingModel;
import com.zenixia.plugins.model.RoomBookingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the RoomBooking service. Represents a row in the &quot;RoomBooking_RoomBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.zenixia.plugins.model.RoomBookingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoomBookingImpl}.
 * </p>
 *
 * @author Guillaume Lenoir
 * @see RoomBookingImpl
 * @see com.zenixia.plugins.model.RoomBooking
 * @see com.zenixia.plugins.model.RoomBookingModel
 * @generated
 */
@JSON(strict = true)
public class RoomBookingModelImpl extends BaseModelImpl<RoomBooking>
    implements RoomBookingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a room booking model instance should use the {@link com.zenixia.plugins.model.RoomBooking} interface instead.
     */
    public static final String TABLE_NAME = "RoomBooking_RoomBooking";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "roomBookingId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "roomId", Types.BIGINT },
            { "vEventUid", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "startTime", Types.BIGINT },
            { "endTime", Types.BIGINT },
            { "allDay", Types.BOOLEAN },
            { "recurrence", Types.VARCHAR },
            { "firstReminder", Types.BIGINT },
            { "firstReminderType", Types.VARCHAR },
            { "secondReminder", Types.BIGINT },
            { "secondReminderType", Types.VARCHAR },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table RoomBooking_RoomBooking (uuid_ VARCHAR(75) null,roomBookingId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,userName VARCHAR(75) null,roomId LONG,vEventUid VARCHAR(75) null,title STRING null,description STRING null,startTime LONG,endTime LONG,allDay BOOLEAN,recurrence VARCHAR(75) null,firstReminder LONG,firstReminderType VARCHAR(75) null,secondReminder LONG,secondReminderType VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table RoomBooking_RoomBooking";
    public static final String ORDER_BY_JPQL = " ORDER BY roomBooking.startTime ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RoomBooking_RoomBooking.startTime ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.zenixia.plugins.model.RoomBooking"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.zenixia.plugins.model.RoomBooking"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.zenixia.plugins.model.RoomBooking"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long STARTTIME_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.zenixia.plugins.model.RoomBooking"));
    private static ClassLoader _classLoader = RoomBooking.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RoomBooking.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _roomBookingId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private Date _createDate;
    private Date _modifiedDate;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private long _roomId;
    private String _vEventUid;
    private String _title;
    private String _titleCurrentLanguageId;
    private String _description;
    private String _descriptionCurrentLanguageId;
    private long _startTime;
    private long _endTime;
    private boolean _allDay;
    private String _recurrence;
    private long _firstReminder;
    private String _firstReminderType;
    private long _secondReminder;
    private String _secondReminderType;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private long _columnBitmask;
    private RoomBooking _escapedModel;

    public RoomBookingModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static RoomBooking toModel(RoomBookingSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        RoomBooking model = new RoomBookingImpl();

        model.setUuid(soapModel.getUuid());
        model.setRoomBookingId(soapModel.getRoomBookingId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setRoomId(soapModel.getRoomId());
        model.setVEventUid(soapModel.getVEventUid());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setStartTime(soapModel.getStartTime());
        model.setEndTime(soapModel.getEndTime());
        model.setAllDay(soapModel.getAllDay());
        model.setRecurrence(soapModel.getRecurrence());
        model.setFirstReminder(soapModel.getFirstReminder());
        model.setFirstReminderType(soapModel.getFirstReminderType());
        model.setSecondReminder(soapModel.getSecondReminder());
        model.setSecondReminderType(soapModel.getSecondReminderType());
        model.setStatus(soapModel.getStatus());
        model.setStatusByUserId(soapModel.getStatusByUserId());
        model.setStatusByUserName(soapModel.getStatusByUserName());
        model.setStatusDate(soapModel.getStatusDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<RoomBooking> toModels(RoomBookingSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<RoomBooking> models = new ArrayList<RoomBooking>(soapModels.length);

        for (RoomBookingSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _roomBookingId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRoomBookingId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _roomBookingId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return RoomBooking.class;
    }

    @Override
    public String getModelClassName() {
        return RoomBooking.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("roomBookingId", getRoomBookingId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("roomId", getRoomId());
        attributes.put("vEventUid", getVEventUid());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("startTime", getStartTime());
        attributes.put("endTime", getEndTime());
        attributes.put("allDay", getAllDay());
        attributes.put("recurrence", getRecurrence());
        attributes.put("firstReminder", getFirstReminder());
        attributes.put("firstReminderType", getFirstReminderType());
        attributes.put("secondReminder", getSecondReminder());
        attributes.put("secondReminderType", getSecondReminderType());
        attributes.put("status", getStatus());
        attributes.put("statusByUserId", getStatusByUserId());
        attributes.put("statusByUserName", getStatusByUserName());
        attributes.put("statusDate", getStatusDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long roomBookingId = (Long) attributes.get("roomBookingId");

        if (roomBookingId != null) {
            setRoomBookingId(roomBookingId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Long roomId = (Long) attributes.get("roomId");

        if (roomId != null) {
            setRoomId(roomId);
        }

        String vEventUid = (String) attributes.get("vEventUid");

        if (vEventUid != null) {
            setVEventUid(vEventUid);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long startTime = (Long) attributes.get("startTime");

        if (startTime != null) {
            setStartTime(startTime);
        }

        Long endTime = (Long) attributes.get("endTime");

        if (endTime != null) {
            setEndTime(endTime);
        }

        Boolean allDay = (Boolean) attributes.get("allDay");

        if (allDay != null) {
            setAllDay(allDay);
        }

        String recurrence = (String) attributes.get("recurrence");

        if (recurrence != null) {
            setRecurrence(recurrence);
        }

        Long firstReminder = (Long) attributes.get("firstReminder");

        if (firstReminder != null) {
            setFirstReminder(firstReminder);
        }

        String firstReminderType = (String) attributes.get("firstReminderType");

        if (firstReminderType != null) {
            setFirstReminderType(firstReminderType);
        }

        Long secondReminder = (Long) attributes.get("secondReminder");

        if (secondReminder != null) {
            setSecondReminder(secondReminder);
        }

        String secondReminderType = (String) attributes.get(
                "secondReminderType");

        if (secondReminderType != null) {
            setSecondReminderType(secondReminderType);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long statusByUserId = (Long) attributes.get("statusByUserId");

        if (statusByUserId != null) {
            setStatusByUserId(statusByUserId);
        }

        String statusByUserName = (String) attributes.get("statusByUserName");

        if (statusByUserName != null) {
            setStatusByUserName(statusByUserName);
        }

        Date statusDate = (Date) attributes.get("statusDate");

        if (statusDate != null) {
            setStatusDate(statusDate);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getRoomBookingId() {
        return _roomBookingId;
    }

    @Override
    public void setRoomBookingId(long roomBookingId) {
        _roomBookingId = roomBookingId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public long getRoomId() {
        return _roomId;
    }

    @Override
    public void setRoomId(long roomId) {
        _roomId = roomId;
    }

    @JSON
    @Override
    public String getVEventUid() {
        if (_vEventUid == null) {
            return StringPool.BLANK;
        } else {
            return _vEventUid;
        }
    }

    @Override
    public void setVEventUid(String vEventUid) {
        _vEventUid = vEventUid;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public String getTitle(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getTitle(languageId);
    }

    @Override
    public String getTitle(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getTitle(languageId, useDefault);
    }

    @Override
    public String getTitle(String languageId) {
        return LocalizationUtil.getLocalization(getTitle(), languageId);
    }

    @Override
    public String getTitle(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getTitle(), languageId,
            useDefault);
    }

    @Override
    public String getTitleCurrentLanguageId() {
        return _titleCurrentLanguageId;
    }

    @JSON
    @Override
    public String getTitleCurrentValue() {
        Locale locale = getLocale(_titleCurrentLanguageId);

        return getTitle(locale);
    }

    @Override
    public Map<Locale, String> getTitleMap() {
        return LocalizationUtil.getLocalizationMap(getTitle());
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @Override
    public void setTitle(String title, Locale locale) {
        setTitle(title, locale, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setTitle(String title, Locale locale, Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(title)) {
            setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
                    title, languageId, defaultLanguageId));
        } else {
            setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
                    languageId));
        }
    }

    @Override
    public void setTitleCurrentLanguageId(String languageId) {
        _titleCurrentLanguageId = languageId;
    }

    @Override
    public void setTitleMap(Map<Locale, String> titleMap) {
        setTitleMap(titleMap, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
        if (titleMap == null) {
            return;
        }

        setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
                "Title", LocaleUtil.toLanguageId(defaultLocale)));
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public String getDescription(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId);
    }

    @Override
    public String getDescription(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId, useDefault);
    }

    @Override
    public String getDescription(String languageId) {
        return LocalizationUtil.getLocalization(getDescription(), languageId);
    }

    @Override
    public String getDescription(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getDescription(), languageId,
            useDefault);
    }

    @Override
    public String getDescriptionCurrentLanguageId() {
        return _descriptionCurrentLanguageId;
    }

    @JSON
    @Override
    public String getDescriptionCurrentValue() {
        Locale locale = getLocale(_descriptionCurrentLanguageId);

        return getDescription(locale);
    }

    @Override
    public Map<Locale, String> getDescriptionMap() {
        return LocalizationUtil.getLocalizationMap(getDescription());
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public void setDescription(String description, Locale locale) {
        setDescription(description, locale, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setDescription(String description, Locale locale,
        Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(description)) {
            setDescription(LocalizationUtil.updateLocalization(
                    getDescription(), "Description", description, languageId,
                    defaultLanguageId));
        } else {
            setDescription(LocalizationUtil.removeLocalization(
                    getDescription(), "Description", languageId));
        }
    }

    @Override
    public void setDescriptionCurrentLanguageId(String languageId) {
        _descriptionCurrentLanguageId = languageId;
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap) {
        setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap,
        Locale defaultLocale) {
        if (descriptionMap == null) {
            return;
        }

        setDescription(LocalizationUtil.updateLocalization(descriptionMap,
                getDescription(), "Description",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @JSON
    @Override
    public long getStartTime() {
        return _startTime;
    }

    @Override
    public void setStartTime(long startTime) {
        _columnBitmask = -1L;

        _startTime = startTime;
    }

    @JSON
    @Override
    public long getEndTime() {
        return _endTime;
    }

    @Override
    public void setEndTime(long endTime) {
        _endTime = endTime;
    }

    @JSON
    @Override
    public boolean getAllDay() {
        return _allDay;
    }

    @Override
    public boolean isAllDay() {
        return _allDay;
    }

    @Override
    public void setAllDay(boolean allDay) {
        _allDay = allDay;
    }

    @JSON
    @Override
    public String getRecurrence() {
        if (_recurrence == null) {
            return StringPool.BLANK;
        } else {
            return _recurrence;
        }
    }

    @Override
    public void setRecurrence(String recurrence) {
        _recurrence = recurrence;
    }

    @JSON
    @Override
    public long getFirstReminder() {
        return _firstReminder;
    }

    @Override
    public void setFirstReminder(long firstReminder) {
        _firstReminder = firstReminder;
    }

    @JSON
    @Override
    public String getFirstReminderType() {
        if (_firstReminderType == null) {
            return StringPool.BLANK;
        } else {
            return _firstReminderType;
        }
    }

    @Override
    public void setFirstReminderType(String firstReminderType) {
        _firstReminderType = firstReminderType;
    }

    @JSON
    @Override
    public long getSecondReminder() {
        return _secondReminder;
    }

    @Override
    public void setSecondReminder(long secondReminder) {
        _secondReminder = secondReminder;
    }

    @JSON
    @Override
    public String getSecondReminderType() {
        if (_secondReminderType == null) {
            return StringPool.BLANK;
        } else {
            return _secondReminderType;
        }
    }

    @Override
    public void setSecondReminderType(String secondReminderType) {
        _secondReminderType = secondReminderType;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @JSON
    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @JSON
    @Override
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        } else {
            return _statusByUserName;
        }
    }

    @Override
    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    @JSON
    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                RoomBooking.class.getName()));
    }

    /**
     * @deprecated As of 6.1.0, replaced by {@link #isApproved}
     */
    @Override
    public boolean getApproved() {
        return isApproved();
    }

    @Override
    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDenied() {
        if (getStatus() == WorkflowConstants.STATUS_DENIED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInactive() {
        if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isIncomplete() {
        if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isScheduled() {
        if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            RoomBooking.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public String[] getAvailableLanguageIds() {
        Set<String> availableLanguageIds = new TreeSet<String>();

        Map<Locale, String> titleMap = getTitleMap();

        for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        Map<Locale, String> descriptionMap = getDescriptionMap();

        for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
    }

    @Override
    public String getDefaultLanguageId() {
        String xml = getTitle();

        if (xml == null) {
            return StringPool.BLANK;
        }

        return LocalizationUtil.getDefaultLanguageId(xml);
    }

    @Override
    public void prepareLocalizedFieldsForImport() throws LocaleException {
        prepareLocalizedFieldsForImport(null);
    }

    @Override
    @SuppressWarnings("unused")
    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException {
        Locale defaultLocale = LocaleUtil.getDefault();

        String modelDefaultLanguageId = getDefaultLanguageId();

        String title = getTitle(defaultLocale);

        if (Validator.isNull(title)) {
            setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
        } else {
            setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
        }

        String description = getDescription(defaultLocale);

        if (Validator.isNull(description)) {
            setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
        } else {
            setDescription(getDescription(defaultLocale), defaultLocale,
                defaultLocale);
        }
    }

    @Override
    public RoomBooking toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RoomBooking) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RoomBookingImpl roomBookingImpl = new RoomBookingImpl();

        roomBookingImpl.setUuid(getUuid());
        roomBookingImpl.setRoomBookingId(getRoomBookingId());
        roomBookingImpl.setCompanyId(getCompanyId());
        roomBookingImpl.setGroupId(getGroupId());
        roomBookingImpl.setCreateDate(getCreateDate());
        roomBookingImpl.setModifiedDate(getModifiedDate());
        roomBookingImpl.setUserId(getUserId());
        roomBookingImpl.setUserName(getUserName());
        roomBookingImpl.setRoomId(getRoomId());
        roomBookingImpl.setVEventUid(getVEventUid());
        roomBookingImpl.setTitle(getTitle());
        roomBookingImpl.setDescription(getDescription());
        roomBookingImpl.setStartTime(getStartTime());
        roomBookingImpl.setEndTime(getEndTime());
        roomBookingImpl.setAllDay(getAllDay());
        roomBookingImpl.setRecurrence(getRecurrence());
        roomBookingImpl.setFirstReminder(getFirstReminder());
        roomBookingImpl.setFirstReminderType(getFirstReminderType());
        roomBookingImpl.setSecondReminder(getSecondReminder());
        roomBookingImpl.setSecondReminderType(getSecondReminderType());
        roomBookingImpl.setStatus(getStatus());
        roomBookingImpl.setStatusByUserId(getStatusByUserId());
        roomBookingImpl.setStatusByUserName(getStatusByUserName());
        roomBookingImpl.setStatusDate(getStatusDate());

        roomBookingImpl.resetOriginalValues();

        return roomBookingImpl;
    }

    @Override
    public int compareTo(RoomBooking roomBooking) {
        int value = 0;

        if (getStartTime() < roomBooking.getStartTime()) {
            value = -1;
        } else if (getStartTime() > roomBooking.getStartTime()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RoomBooking)) {
            return false;
        }

        RoomBooking roomBooking = (RoomBooking) obj;

        long primaryKey = roomBooking.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RoomBookingModelImpl roomBookingModelImpl = this;

        roomBookingModelImpl._originalUuid = roomBookingModelImpl._uuid;

        roomBookingModelImpl._originalCompanyId = roomBookingModelImpl._companyId;

        roomBookingModelImpl._setOriginalCompanyId = false;

        roomBookingModelImpl._originalGroupId = roomBookingModelImpl._groupId;

        roomBookingModelImpl._setOriginalGroupId = false;

        roomBookingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<RoomBooking> toCacheModel() {
        RoomBookingCacheModel roomBookingCacheModel = new RoomBookingCacheModel();

        roomBookingCacheModel.uuid = getUuid();

        String uuid = roomBookingCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            roomBookingCacheModel.uuid = null;
        }

        roomBookingCacheModel.roomBookingId = getRoomBookingId();

        roomBookingCacheModel.companyId = getCompanyId();

        roomBookingCacheModel.groupId = getGroupId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            roomBookingCacheModel.createDate = createDate.getTime();
        } else {
            roomBookingCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            roomBookingCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            roomBookingCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        roomBookingCacheModel.userId = getUserId();

        roomBookingCacheModel.userName = getUserName();

        String userName = roomBookingCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            roomBookingCacheModel.userName = null;
        }

        roomBookingCacheModel.roomId = getRoomId();

        roomBookingCacheModel.vEventUid = getVEventUid();

        String vEventUid = roomBookingCacheModel.vEventUid;

        if ((vEventUid != null) && (vEventUid.length() == 0)) {
            roomBookingCacheModel.vEventUid = null;
        }

        roomBookingCacheModel.title = getTitle();

        String title = roomBookingCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            roomBookingCacheModel.title = null;
        }

        roomBookingCacheModel.description = getDescription();

        String description = roomBookingCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            roomBookingCacheModel.description = null;
        }

        roomBookingCacheModel.startTime = getStartTime();

        roomBookingCacheModel.endTime = getEndTime();

        roomBookingCacheModel.allDay = getAllDay();

        roomBookingCacheModel.recurrence = getRecurrence();

        String recurrence = roomBookingCacheModel.recurrence;

        if ((recurrence != null) && (recurrence.length() == 0)) {
            roomBookingCacheModel.recurrence = null;
        }

        roomBookingCacheModel.firstReminder = getFirstReminder();

        roomBookingCacheModel.firstReminderType = getFirstReminderType();

        String firstReminderType = roomBookingCacheModel.firstReminderType;

        if ((firstReminderType != null) && (firstReminderType.length() == 0)) {
            roomBookingCacheModel.firstReminderType = null;
        }

        roomBookingCacheModel.secondReminder = getSecondReminder();

        roomBookingCacheModel.secondReminderType = getSecondReminderType();

        String secondReminderType = roomBookingCacheModel.secondReminderType;

        if ((secondReminderType != null) && (secondReminderType.length() == 0)) {
            roomBookingCacheModel.secondReminderType = null;
        }

        roomBookingCacheModel.status = getStatus();

        roomBookingCacheModel.statusByUserId = getStatusByUserId();

        roomBookingCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = roomBookingCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            roomBookingCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            roomBookingCacheModel.statusDate = statusDate.getTime();
        } else {
            roomBookingCacheModel.statusDate = Long.MIN_VALUE;
        }

        return roomBookingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(49);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", roomBookingId=");
        sb.append(getRoomBookingId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", roomId=");
        sb.append(getRoomId());
        sb.append(", vEventUid=");
        sb.append(getVEventUid());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", startTime=");
        sb.append(getStartTime());
        sb.append(", endTime=");
        sb.append(getEndTime());
        sb.append(", allDay=");
        sb.append(getAllDay());
        sb.append(", recurrence=");
        sb.append(getRecurrence());
        sb.append(", firstReminder=");
        sb.append(getFirstReminder());
        sb.append(", firstReminderType=");
        sb.append(getFirstReminderType());
        sb.append(", secondReminder=");
        sb.append(getSecondReminder());
        sb.append(", secondReminderType=");
        sb.append(getSecondReminderType());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(76);

        sb.append("<model><model-name>");
        sb.append("com.zenixia.plugins.model.RoomBooking");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>roomBookingId</column-name><column-value><![CDATA[");
        sb.append(getRoomBookingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>roomId</column-name><column-value><![CDATA[");
        sb.append(getRoomId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vEventUid</column-name><column-value><![CDATA[");
        sb.append(getVEventUid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startTime</column-name><column-value><![CDATA[");
        sb.append(getStartTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endTime</column-name><column-value><![CDATA[");
        sb.append(getEndTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>allDay</column-name><column-value><![CDATA[");
        sb.append(getAllDay());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recurrence</column-name><column-value><![CDATA[");
        sb.append(getRecurrence());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstReminder</column-name><column-value><![CDATA[");
        sb.append(getFirstReminder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstReminderType</column-name><column-value><![CDATA[");
        sb.append(getFirstReminderType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondReminder</column-name><column-value><![CDATA[");
        sb.append(getSecondReminder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondReminderType</column-name><column-value><![CDATA[");
        sb.append(getSecondReminderType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
