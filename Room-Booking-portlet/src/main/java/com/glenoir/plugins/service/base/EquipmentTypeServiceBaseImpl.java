package com.glenoir.plugins.service.base;

import com.glenoir.plugins.model.EquipmentType;
import com.glenoir.plugins.service.EquipmentTypeService;
import com.glenoir.plugins.service.persistence.EquipmentPersistence;
import com.glenoir.plugins.service.persistence.EquipmentTypePersistence;
import com.glenoir.plugins.service.persistence.RoomBookingPersistence;
import com.glenoir.plugins.service.persistence.RoomPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the equipment type remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.glenoir.plugins.service.impl.EquipmentTypeServiceImpl}.
 * </p>
 *
 * @author guillaume Lenoir
 * @see com.glenoir.plugins.service.impl.EquipmentTypeServiceImpl
 * @see com.glenoir.plugins.service.EquipmentTypeServiceUtil
 * @generated
 */
public abstract class EquipmentTypeServiceBaseImpl extends BaseServiceImpl
    implements EquipmentTypeService, IdentifiableBean {
    @BeanReference(type = com.glenoir.plugins.service.EquipmentLocalService.class)
    protected com.glenoir.plugins.service.EquipmentLocalService equipmentLocalService;
    @BeanReference(type = com.glenoir.plugins.service.EquipmentService.class)
    protected com.glenoir.plugins.service.EquipmentService equipmentService;
    @BeanReference(type = EquipmentPersistence.class)
    protected EquipmentPersistence equipmentPersistence;
    @BeanReference(type = com.glenoir.plugins.service.EquipmentTypeLocalService.class)
    protected com.glenoir.plugins.service.EquipmentTypeLocalService equipmentTypeLocalService;
    @BeanReference(type = com.glenoir.plugins.service.EquipmentTypeService.class)
    protected com.glenoir.plugins.service.EquipmentTypeService equipmentTypeService;
    @BeanReference(type = EquipmentTypePersistence.class)
    protected EquipmentTypePersistence equipmentTypePersistence;
    @BeanReference(type = com.glenoir.plugins.service.RoomLocalService.class)
    protected com.glenoir.plugins.service.RoomLocalService roomLocalService;
    @BeanReference(type = com.glenoir.plugins.service.RoomService.class)
    protected com.glenoir.plugins.service.RoomService roomService;
    @BeanReference(type = RoomPersistence.class)
    protected RoomPersistence roomPersistence;
    @BeanReference(type = com.glenoir.plugins.service.RoomBookingLocalService.class)
    protected com.glenoir.plugins.service.RoomBookingLocalService roomBookingLocalService;
    @BeanReference(type = com.glenoir.plugins.service.RoomBookingService.class)
    protected com.glenoir.plugins.service.RoomBookingService roomBookingService;
    @BeanReference(type = RoomBookingPersistence.class)
    protected RoomBookingPersistence roomBookingPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private EquipmentTypeServiceClpInvoker _clpInvoker = new EquipmentTypeServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.glenoir.plugins.service.EquipmentTypeServiceUtil} to access the equipment type remote service.
     */

    /**
     * Returns the equipment local service.
     *
     * @return the equipment local service
     */
    public com.glenoir.plugins.service.EquipmentLocalService getEquipmentLocalService() {
        return equipmentLocalService;
    }

    /**
     * Sets the equipment local service.
     *
     * @param equipmentLocalService the equipment local service
     */
    public void setEquipmentLocalService(
        com.glenoir.plugins.service.EquipmentLocalService equipmentLocalService) {
        this.equipmentLocalService = equipmentLocalService;
    }

    /**
     * Returns the equipment remote service.
     *
     * @return the equipment remote service
     */
    public com.glenoir.plugins.service.EquipmentService getEquipmentService() {
        return equipmentService;
    }

    /**
     * Sets the equipment remote service.
     *
     * @param equipmentService the equipment remote service
     */
    public void setEquipmentService(
        com.glenoir.plugins.service.EquipmentService equipmentService) {
        this.equipmentService = equipmentService;
    }

    /**
     * Returns the equipment persistence.
     *
     * @return the equipment persistence
     */
    public EquipmentPersistence getEquipmentPersistence() {
        return equipmentPersistence;
    }

    /**
     * Sets the equipment persistence.
     *
     * @param equipmentPersistence the equipment persistence
     */
    public void setEquipmentPersistence(
        EquipmentPersistence equipmentPersistence) {
        this.equipmentPersistence = equipmentPersistence;
    }

    /**
     * Returns the equipment type local service.
     *
     * @return the equipment type local service
     */
    public com.glenoir.plugins.service.EquipmentTypeLocalService getEquipmentTypeLocalService() {
        return equipmentTypeLocalService;
    }

    /**
     * Sets the equipment type local service.
     *
     * @param equipmentTypeLocalService the equipment type local service
     */
    public void setEquipmentTypeLocalService(
        com.glenoir.plugins.service.EquipmentTypeLocalService equipmentTypeLocalService) {
        this.equipmentTypeLocalService = equipmentTypeLocalService;
    }

    /**
     * Returns the equipment type remote service.
     *
     * @return the equipment type remote service
     */
    public com.glenoir.plugins.service.EquipmentTypeService getEquipmentTypeService() {
        return equipmentTypeService;
    }

    /**
     * Sets the equipment type remote service.
     *
     * @param equipmentTypeService the equipment type remote service
     */
    public void setEquipmentTypeService(
        com.glenoir.plugins.service.EquipmentTypeService equipmentTypeService) {
        this.equipmentTypeService = equipmentTypeService;
    }

    /**
     * Returns the equipment type persistence.
     *
     * @return the equipment type persistence
     */
    public EquipmentTypePersistence getEquipmentTypePersistence() {
        return equipmentTypePersistence;
    }

    /**
     * Sets the equipment type persistence.
     *
     * @param equipmentTypePersistence the equipment type persistence
     */
    public void setEquipmentTypePersistence(
        EquipmentTypePersistence equipmentTypePersistence) {
        this.equipmentTypePersistence = equipmentTypePersistence;
    }

    /**
     * Returns the room local service.
     *
     * @return the room local service
     */
    public com.glenoir.plugins.service.RoomLocalService getRoomLocalService() {
        return roomLocalService;
    }

    /**
     * Sets the room local service.
     *
     * @param roomLocalService the room local service
     */
    public void setRoomLocalService(
        com.glenoir.plugins.service.RoomLocalService roomLocalService) {
        this.roomLocalService = roomLocalService;
    }

    /**
     * Returns the room remote service.
     *
     * @return the room remote service
     */
    public com.glenoir.plugins.service.RoomService getRoomService() {
        return roomService;
    }

    /**
     * Sets the room remote service.
     *
     * @param roomService the room remote service
     */
    public void setRoomService(
        com.glenoir.plugins.service.RoomService roomService) {
        this.roomService = roomService;
    }

    /**
     * Returns the room persistence.
     *
     * @return the room persistence
     */
    public RoomPersistence getRoomPersistence() {
        return roomPersistence;
    }

    /**
     * Sets the room persistence.
     *
     * @param roomPersistence the room persistence
     */
    public void setRoomPersistence(RoomPersistence roomPersistence) {
        this.roomPersistence = roomPersistence;
    }

    /**
     * Returns the room booking local service.
     *
     * @return the room booking local service
     */
    public com.glenoir.plugins.service.RoomBookingLocalService getRoomBookingLocalService() {
        return roomBookingLocalService;
    }

    /**
     * Sets the room booking local service.
     *
     * @param roomBookingLocalService the room booking local service
     */
    public void setRoomBookingLocalService(
        com.glenoir.plugins.service.RoomBookingLocalService roomBookingLocalService) {
        this.roomBookingLocalService = roomBookingLocalService;
    }

    /**
     * Returns the room booking remote service.
     *
     * @return the room booking remote service
     */
    public com.glenoir.plugins.service.RoomBookingService getRoomBookingService() {
        return roomBookingService;
    }

    /**
     * Sets the room booking remote service.
     *
     * @param roomBookingService the room booking remote service
     */
    public void setRoomBookingService(
        com.glenoir.plugins.service.RoomBookingService roomBookingService) {
        this.roomBookingService = roomBookingService;
    }

    /**
     * Returns the room booking persistence.
     *
     * @return the room booking persistence
     */
    public RoomBookingPersistence getRoomBookingPersistence() {
        return roomBookingPersistence;
    }

    /**
     * Sets the room booking persistence.
     *
     * @param roomBookingPersistence the room booking persistence
     */
    public void setRoomBookingPersistence(
        RoomBookingPersistence roomBookingPersistence) {
        this.roomBookingPersistence = roomBookingPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return EquipmentType.class;
    }

    protected String getModelClassName() {
        return EquipmentType.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = equipmentTypePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
